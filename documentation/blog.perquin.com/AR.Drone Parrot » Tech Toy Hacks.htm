<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<!-- saved from url=(0046)http://blog.perquin.com/blog/category/ardrone/ -->
<html xmlns="http://www.w3.org/1999/xhtml" lang="en-US"><head profile="http://gmpg.org/xfn/11"><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
	
	<link rel="pingback" href="http://blog.perquin.com/xmlrpc.php">

	<title>  AR.Drone Parrot » Tech Toy Hacks</title>
<link rel="alternate" type="application/rss+xml" title="Tech Toy Hacks » Feed" href="http://blog.perquin.com/feed/">
<link rel="alternate" type="application/rss+xml" title="Tech Toy Hacks » Comments Feed" href="http://blog.perquin.com/comments/feed/">
<link rel="alternate" type="application/rss+xml" title="Tech Toy Hacks » AR.Drone Parrot Category Feed" href="http://blog.perquin.com/blog/category/ardrone/feed/">
<link rel="stylesheet" id="cptchStylesheet-css" href="./AR.Drone Parrot » Tech Toy Hacks_files/style.css" type="text/css" media="all">
<link rel="stylesheet" id="suffusion-theme-css" href="./AR.Drone Parrot » Tech Toy Hacks_files/style(1).css" type="text/css" media="all">
<link rel="stylesheet" id="suffusion-theme-skin-1-css" href="./AR.Drone Parrot » Tech Toy Hacks_files/skin.css" type="text/css" media="all">
<!--[if !IE]>--><link rel="stylesheet" id="suffusion-rounded-css" href="./AR.Drone Parrot » Tech Toy Hacks_files/rounded-corners.css" type="text/css" media="all">
<!--<![endif]-->
<!--[if lt IE 8]><link rel='stylesheet' id='suffusion-ie-css'  href='http://blog.perquin.com/wp-content/themes/suffusion/ie-fix.css?ver=3.7.8' type='text/css' media='all' />
<![endif]-->
<link rel="stylesheet" id="suffusion-generated-css" href="./AR.Drone Parrot » Tech Toy Hacks_files/saved_resource" type="text/css" media="all">
<link rel="stylesheet" id="counterize_stylesheet-css" href="./AR.Drone Parrot » Tech Toy Hacks_files/counterize.css.php" type="text/css" media="all">
<script type="text/javascript" src="./AR.Drone Parrot » Tech Toy Hacks_files/jquery.js"></script>
<script type="text/javascript" src="./AR.Drone Parrot » Tech Toy Hacks_files/suffusion.js"></script>
<script type="text/javascript" src="./AR.Drone Parrot » Tech Toy Hacks_files/counterize.js.php"></script>
<link rel="EditURI" type="application/rsd+xml" title="RSD" href="http://blog.perquin.com/xmlrpc.php?rsd">
<link rel="wlwmanifest" type="application/wlwmanifest+xml" href="http://blog.perquin.com/wp-includes/wlwmanifest.xml"> 
<!-- Start Additional Feeds -->
<!-- End Additional Feeds -->
<!--[if lt IE 7]>
<script src="http://blog.perquin.com/wp-content/themes/suffusion/belatedpng.js"></script>
<script>
	//Drew Diller's Belated PNG: http://dillerdesign.wordpress.com/2009/07/02/belatedpng-img-nodes-javascript-event-handling/
  	DD_belatedPNG.fix('img, .suf-widget ul li, #sidebar ul li, #sidebar-2 ul li, .sidebar-tab-content ul li, li.suf-mag-catblock-post, input, .searchform .searchsubmit, #right-header-widgets .searchsubmit, #left-header-widgets .searchsubmit, #top-bar-left-widgets .searchsubmit,  #top-bar-right-widgets .searchsubmit, submit, .searchsubmit, .postdata .category, .postdata .comments, .postdata .edit, .previous-entries a, .next-entries a, .post-nav .next a, .post-nav .previous a, .post .date, h3#comments, h3.comments, #h3#respond, h3.respond, blockquote, blockquote div');
 </script>
<![endif]-->
</head>
<body class="archive category category-ardrone category-6">
        <script type="text/javascript">
        //Menu effects
        var suf_nav_delay = 500;
        var suf_nav_effect = "fade";
        var suf_navt_delay = 500;
        var suf_navt_effect = "fade";
        var suf_jq_masonry_enabled = "disabled";
    </script>
				<div id="wrapper" class="fix">
					<div id="header-container" class="fix">
					<div id="header" class="fix">
			<h1 class="blogtitle"><a href="http://blog.perquin.com/">Tech Toy Hacks</a></h1>
		<div class="description">A loose collection of hardware/software projects.</div>
    </div><!-- /header -->
 	<div id="nav" class="tab fix">
		<div class="col-control">
		<!-- right-header-widgets -->
		<div id="right-header-widgets" class="warea">
		
<form method="get" class="searchform" action="http://blog.perquin.com/">
	<input type="text" value="Search" name="s" class="searchfield" onfocus="if (this.value == &#39;Search&#39;) {this.value = &#39;&#39;;}" onblur="if (this.value == &#39;&#39;) {this.value = &#39;Search&#39;;}">
	<input type="submit" class="searchsubmit" value="" name="searchsubmit">
</form>
		</div>
		<!-- /right-header-widgets -->
		</div><!-- /col-control -->
	</div><!-- /nav -->
			</div><!-- //#header-container -->
			<div id="container" class="fix">
				
    <div id="main-col">
      <div id="content" class="hfeed">
	<div class="post-224 post type-post status-publish format-standard hentry category-ardrone" id="post-224">
		<div class="title-container fix">
			<div class="title">
							<h2 class="posttitle"><a href="http://blog.perquin.com/blog/ar-drone-usb-drive/" class="entry-title" rel="bookmark" title="AR Drone USB Drive">AR Drone USB Drive</a></h2>
				<div class="postdata fix">
					<span class="category"><a href="./AR.Drone Parrot » Tech Toy Hacks_files/AR.Drone Parrot » Tech Toy Hacks.htm" title="View all posts in AR.Drone Parrot" rel="category tag">AR.Drone Parrot</a></span>
			<span class="comments"><a href="http://blog.perquin.com/blog/ar-drone-usb-drive/#comments" title="Comment on AR Drone USB Drive">4 Responses »</a></span>
				</div><!-- /.postdata -->
			</div><!-- /.title -->
			<div class="date"><span class="month">Sep</span> <span class="day">03</span><span class="year">2012</span></div>
		</div><!-- /.title-container -->
	<div class="entry-container fix">
		<div class="entry entry-content fix">
<p>The file below contains the precompiled modules to use an usb drive on the AR.Drone v1.0. It has been tested to work&nbsp;with firmware 1.11.3 and 1.3.3</p>
<p><a href="http://blog.perquin.com/wp-content/uploads/2012/09/usb-drive.tar.gz">Download usb-drive.tar.gz</a></p>
<p>To install, ftp usb-drive.tar.gz to the drone’s /data/video directory, then open a telnet session to the drone and execute:<br>
cd /data/video<br>
tar xzf usb-drive.tar.gz<br>
/data/video/usb-drive/load.sh</p>
<p>The load.sh file and the recipe to create the the .ko binaries was found here:<br>
<a href="http://taghof.github.com/Navigation-for-Robots-with-WIFI-and-CV/blog/2012/01/12/Enabling-The-Drone-USB-Port/">http://taghof.github.com/Navigation-for-Robots-with-WIFI-and-CV/blog/2012/01/12/Enabling-The-Drone-USB-Port/</a><br>
Thanks Morten Daugaard and Thomas Vrang Thyregod!</p>
<p>Note: on my drone setting pin 127 did not enable the +5V on the USB connector, I probably blew up the pin&nbsp;in previous experiments!!! So, instead I used the +5V from pin1 on the navboard connector. This works, but only if the USB Stick is inserted after running the load.sh script…</p>
<p><a href="./AR.Drone Parrot » Tech Toy Hacks_files/usb-drive.png"><img class="alignnone size-full wp-image-226" title="usb-drive" src="./AR.Drone Parrot » Tech Toy Hacks_files/usb-drive.png" alt="" width="677"></a></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
		</div><!--entry -->
	</div><!-- .entry-container -->
	<div class="post-footer fix">
	<span class="author">
	Posted by <a href="http://blog.perquin.com/blog/author/hugo/">hugo</a> at 1:49 pm</span>
			<span class="tags"></span>
	</div><!-- .post-footer -->
	</div><!--post -->
	<div class="post-57 post type-post status-publish format-standard hentry category-ardrone" id="post-57">
		<div class="title-container fix">
			<div class="title">
							<h2 class="posttitle"><a href="http://blog.perquin.com/blog/ar-drone-program-elf-replacement/" class="entry-title" rel="bookmark" title="AR Drone program.elf Replacement">AR Drone program.elf Replacement</a></h2>
				<div class="postdata fix">
					<span class="category"><a href="./AR.Drone Parrot » Tech Toy Hacks_files/AR.Drone Parrot » Tech Toy Hacks.htm" title="View all posts in AR.Drone Parrot" rel="category tag">AR.Drone Parrot</a></span>
			<span class="comments"><a href="http://blog.perquin.com/blog/ar-drone-program-elf-replacement/#comments" title="Comment on AR Drone program.elf Replacement">21 Responses »</a></span>
				</div><!-- /.postdata -->
			</div><!-- /.title -->
			<div class="date"><span class="month">Sep</span> <span class="day">20</span><span class="year">2011</span></div>
		</div><!-- /.title-container -->
	<div class="entry-container fix">
		<div class="entry entry-content fix">
<p>This project provides an open source firmware for the AR.Drone quadrocopter&nbsp;by Parrot.</p>
<p><strong>WARNING:</strong> This project is not supported nor endorsed by Parrot S.A., using this sofware will most likely void your warranty and might destroy your drone or make it fly away into deep space. Use at your own risk.</p>
<p><a href="http://blog.perquin.com/prj/ardrone/CustomFirmwareArDrone.zip">Click here to download the Custom Firmware</a>&nbsp;or <a href="https://github.com/ardrone/ardrone">browse the source&nbsp;code&nbsp;on github</a></p>
<p>The new firmware for the drone is called ‘fly’. Upon start it will listen on UDP port 7777, waiting for the PC based controller called ‘OpenFlight’ to connect. Once OpenFlight connects, ‘fly’ kills the Parrot firmware ‘program.elf’ and takes control of the drone. Now you can fly the drone with the PC keyboard. OpenFlight logs the flight data to a file called YYYYMMDDHHMMSS_navlog.csv.</p>
<h2>Known Issues</h2>
<ul>
<li>The PID controller parameters have not been optimized yet and currently only use ‘P’ parameters. In particular the height controller will probably settle below&nbsp;the&nbsp;target height, or the drone might not have enough power to take off.</li>
<li>The OpenFlight user interface is very rudimentary.</li>
<li>No soft landing function is implemented. In order to land: fly the drone to minimum altitude and then switch off the motors.</li>
<li>‘Flat Trim’ parameters are not saved and are estimated after OpenFlight connects. Place the drone on a horizontal surface before connecting with OpenFlight.</li>
<li>No battery voltage monitoring. The drone will fall out of the sky once&nbsp;the battery is drained.</li>
</ul>
<h2>Install</h2>
<p>1) FTP the folder ardrone/bin to your drone</p>
<p>2) Open a telnet session to your drone and execute:<br>
# chmod 777 /data/video/bin/*<br>
# /data/video/bin/fly</p>
<p>3) On your pc, start OpenFlight.exe and follow the instructions on screen.</p>
<p>4) (Optional) Execute the following command to make ‘fly’ start everytime you powerup the drone:<br>
# echo -e “\n\n/data/video/bin/fly &amp;” &gt;&gt; /etc/init.d/rcS</p>
<p>Other telnet commandline demo programs on the drone are:<br>
You’ll need to execute `killall program.elf` before using these programs!<br>
# /data/video/bin/navboard&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; – to see the navboard raw sensor data (3-axis accelleration, 3-axis gyro, sonar echos)<br>
# /data/video/bin/attitude&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; – to see the navboard attitude data (pitch angle, roll angle, yaw angle, height)<br>
# /data/video/bin/motorboard&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; – to control the motors/leds<br>
# /data/video/bin/vbat&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; – to see the on board voltages<br>
# /data/video/bin/video&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; – turns the drone into a giant optical mouse, keep it about 1 meter above ground and move it parallel to the ground. The program should report the movement.</p>
<h2>Directories</h2>
<p>ardrone/bin&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; – Pre-compiled binaries. FTP these files to your drone and run them in a telnet session.<br>
ardrone/fly&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; – Custom firmware to fly the drone, the controller is in directory /pc/OpenFlight<br>
ardrone/navboard&nbsp;&nbsp; – Navboard driver and demo getting raw data from the navboard and converting it to realworld units<br>
ardrone/attitude&nbsp;&nbsp; – Attitude driver and demo calculating attitude (pitch,roll,yaw and height) estimates from navboard data<br>
ardrone/motorboard – Motorboard driver and demo control of the 4 motors and leds<br>
ardrone/vbat&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; – Battery voltage driver and demo<br>
ardrone/gpio&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; – GPIO driver and demo<br>
ardrone/video&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; – Video driver and demo (needs start&amp;kill of program.elf to init the video)<br>
ardrone/util&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; – Utilities<br>
pc/OpenFlight&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; – C# controller for /ardrone/bin/fly</p>
<h2>Compiling</h2>
<p>For ardrone source code:<br>
1) Download and install arm-2011.03-41-arm-none-linux-gnueabi.exe “Sourcery G++ Lite 2011.03-41 for ARM GNU/Linux” from <a href="http://www.codesourcery.com/sgpp/lite/arm/portal/release1803">http://www.codesourcery.com/sgpp/lite/arm/portal/release1803</a><br>
2) On Windows: open a command prompt and cd to one of the directories<br>
3) Run the make.bat batch file to compile the program in that directory</p>
<p>For pc source code<br>
1) Download and install Visual Studio C# 2010 Express<br>
2) Open pc/OpenFlight.sln</p>
<h2>Changelog</h2>
<p>19-Sep-2011 V03 Added ardrone/fly and pc/OpenFlight<br>
20-Jul-2011 V02 Added video<br>
17-Jul-2011 V01 Initial release</p>
		</div><!--entry -->
	</div><!-- .entry-container -->
	<div class="post-footer fix">
	<span class="author">
	Posted by <a href="http://blog.perquin.com/blog/author/hugo/">hugo</a> at 1:22 am</span>
			<span class="tags"></span>
	</div><!-- .post-footer -->
	</div><!--post -->
	<div class="post-169 post type-post status-publish format-standard hentry category-ardrone" id="post-169">
		<div class="title-container fix">
			<div class="title">
							<h2 class="posttitle"><a href="http://blog.perquin.com/blog/ar-drone-versions/" class="entry-title" rel="bookmark" title="AR Drone Versions">AR Drone Versions</a></h2>
				<div class="postdata fix">
					<span class="category"><a href="./AR.Drone Parrot » Tech Toy Hacks_files/AR.Drone Parrot » Tech Toy Hacks.htm" title="View all posts in AR.Drone Parrot" rel="category tag">AR.Drone Parrot</a></span>
			<span class="comments"><a href="http://blog.perquin.com/blog/ar-drone-versions/#respond" title="Comment on AR Drone Versions">No Responses »</a></span>
				</div><!-- /.postdata -->
			</div><!-- /.title -->
			<div class="date"><span class="month">Sep</span> <span class="day">09</span><span class="year">2011</span></div>
		</div><!-- /.title-container -->
	<div class="entry-container fix">
		<div class="entry entry-content fix">
<p>Below are&nbsp;the Software and Hardware versions of&nbsp;the AR Drone v1.0&nbsp;that I used for the experiments on this site. The linux version is 2.6.26.47.</p>
<h2>Software Versions</h2>
<pre>Firmware Release-Date Navboard Motor SDK FreeFlight-App
  1.11.3   02-08-2012?    4.70  1.42   ?   1.9.3
   1.7.4   26-07-2011     4.65  1.20 1.8     1.9
   1.6.6   25-05-2011     4.62  1.16 1.7     1.8
   1.5.1   24-02-2011     4.58  1.15 1.6   1.7.1
   1.4.7            ?     4.58  1.11   ?       ?
   1.3.3   04-10-2010     4.55  1.11 1.5     1.5
   1.0.4   23-07-2010?       ?     ?   ?       ?</pre>
<h2>Hardware Versions</h2>
<pre>Drone v1.0: 11.0
Navboard:    6.0
Motorboard:  3.0 (Motor Type/Supplier is 1.1 or 2.2)</pre>
		</div><!--entry -->
	</div><!-- .entry-container -->
	<div class="post-footer fix">
	<span class="author">
	Posted by <a href="http://blog.perquin.com/blog/author/hugo/">hugo</a> at 11:54 am</span>
			<span class="tags"></span>
	</div><!-- .post-footer -->
	</div><!--post -->
	<div class="post-151 post type-post status-publish format-standard hentry category-ardrone" id="post-151">
		<div class="title-container fix">
			<div class="title">
							<h2 class="posttitle"><a href="http://blog.perquin.com/blog/ar-drone-video/" class="entry-title" rel="bookmark" title="AR Drone Video">AR Drone Video</a></h2>
				<div class="postdata fix">
					<span class="category"><a href="./AR.Drone Parrot » Tech Toy Hacks_files/AR.Drone Parrot » Tech Toy Hacks.htm" title="View all posts in AR.Drone Parrot" rel="category tag">AR.Drone Parrot</a></span>
			<span class="comments"><a href="http://blog.perquin.com/blog/ar-drone-video/#respond" title="Comment on AR Drone Video">No Responses »</a></span>
				</div><!-- /.postdata -->
			</div><!-- /.title -->
			<div class="date"><span class="month">Jul</span> <span class="day">20</span><span class="year">2011</span></div>
		</div><!-- /.title-container -->
	<div class="entry-container fix">
		<div class="entry entry-content fix">
<p>The front camera is an OmniVision ov7725 and the datasheet is available on the web.</p>
<p>The bottom camera is a “cresyn qcif”, I could not find further information for this camera.</p>
<p>You can <a href="http://blog.perquin.com/prj/ardrone/CustomFirmwareArDrone.zip">download&nbsp;a on-board c program (source+binary)</a> to convert the drone into a giant optical mouse. Hold the drone at a fix distance above ground and the program will report the movement in the horizontal plane.</p>
<h2>i2c bus</h2>
<p>The cameras are configured via the i2c bus. The front camera is on /dev/i2c-1 address 0×21, the bottom camera is on /dev/i2c-0 address 0x5d.</p>
<h2>Bottom Camera Initialization</h2>
<pre>i2cset -y 0 0x49 0x0a 0x85&nbsp;&nbsp;&nbsp;&nbsp; - sets Vdd4 to 3.0V
gpio 59 -d ho 1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;- set CE enabled</pre>
<p>After this the camara is visible on /dev/i2c-0 address 0x5d. Now send configuration via i2c. The configuration sent over the i2c bus can be extracted from a “strace” of program.elf, but I did not dig furter into this.</p>
<h2>Front Camera Initialization</h2>
<pre>gpio 101 -d ho&nbsp;0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - set PWDN_H&nbsp;1=power down,0=active
gpio 109 -d ho&nbsp;1&nbsp;&nbsp;&nbsp; &nbsp; - set CE_H 1=enabled,0=not enabled</pre>
<p>However: This still does not make the camera visible on the i2c bus. Running program.elf does make it visible on the bus, after which “gpio 101 -d ho 1″, “gpio 101 -d i”,&nbsp;&nbsp;”gpio 109 -d ho&nbsp;0″, or “gpio 109 -d i”&nbsp;will make it disappear from the i2c bus.</p>
		</div><!--entry -->
	</div><!-- .entry-container -->
	<div class="post-footer fix">
	<span class="author">
	Posted by <a href="http://blog.perquin.com/blog/author/hugo/">hugo</a> at 2:50 pm</span>
			<span class="tags"></span>
	</div><!-- .post-footer -->
	</div><!--post -->
	<div class="post-97 post type-post status-publish format-standard hentry category-ardrone" id="post-97">
		<div class="title-container fix">
			<div class="title">
							<h2 class="posttitle"><a href="http://blog.perquin.com/blog/ar-drone-gpio/" class="entry-title" rel="bookmark" title="AR Drone GPIO">AR Drone GPIO</a></h2>
				<div class="postdata fix">
					<span class="category"><a href="./AR.Drone Parrot » Tech Toy Hacks_files/AR.Drone Parrot » Tech Toy Hacks.htm" title="View all posts in AR.Drone Parrot" rel="category tag">AR.Drone Parrot</a></span>
			<span class="comments"><a href="http://blog.perquin.com/blog/ar-drone-gpio/#comments" title="Comment on AR Drone GPIO">1 Response »</a></span>
				</div><!-- /.postdata -->
			</div><!-- /.title -->
			<div class="date"><span class="month">Jul</span> <span class="day">17</span><span class="year">2011</span></div>
		</div><!-- /.title-container -->
	<div class="entry-container fix">
		<div class="entry entry-content fix">
<p>This blog page is dedicated to the GPIOs of the AR Drone. You can download a custom GPIO driver <a href="http://blog.perquin.com/prj/ardrone/CustomFirmwareArDrone.zip">here</a>.</p>
<pre><strong>nr I/O Description
</strong> 29 O ??? disable NAND flash write protection on P6 dev 1=disable write prot (FC6050 Parrot platform) fc6050.c
 34 O ??? disable NAND flash write protection on P6 dev 1=disable write prot
 43 O ??? Reset_Wlan 1=reset
 59 O Camera1 (Facing Down) CE 1=enabled,0=not enabled
 63 O Red LED 0=off,1=on
 64 O Green LED 0=off,1=on
 68 O Motor1 /Select 0=selected,1=deselected
 69 O Motor2 /Select 0=selected,1=deselected
 70 O Motor3 /Select 0=selected,1=deselected
 71 O Motor4 /Select 0=selected,1=deselected
 89 ? ??? CAM0_VSYNC
101 O Camera0 (Horizontal) PWDN_H 1=power down,0=active
106 I Motor Cutout
107 O Motor Enable 1=Enable
108 I Reset Button 0=unpressed,1=pressed
109 O Camera0 (Horizontal) CE_H 1=enabled,0=not enabled
127 O USB Connector Pin1 - Vusb
130 O Navboard Connector Pin2 - PGED2
131 O Navboard Connector Pin4 - PGEC2
132 O Navboard Connector Pin6 - /MCLR
158 I Pair Button 0=unpressed,1=pressed</pre>
<div id="_mcePaste" class="mcePaste" style="position: absolute; width: 1px; height: 1px; overflow: hidden; top: 0px; left: -10000px;">﻿</div>
<h2>Extension Port Pinout</h2>
<pre>Pin1 Vusb +5V (USB red)
Pin2 Vbat +11.7
Pin3 USB D- (USB white)
Pin4 RX (Serial data input to Drone)
Pin5 USB D+ (USB green)
Pin6 TX (Serial data output from Drone)
Pin7 GRD (USB black)
Pin8 No Pin</pre>
		</div><!--entry -->
	</div><!-- .entry-container -->
	<div class="post-footer fix">
	<span class="author">
	Posted by <a href="http://blog.perquin.com/blog/author/hugo/">hugo</a> at 8:09 pm</span>
			<span class="tags"></span>
	</div><!-- .post-footer -->
	</div><!--post -->
	<div class="post-101 post type-post status-publish format-standard hentry category-ardrone" id="post-101">
		<div class="title-container fix">
			<div class="title">
							<h2 class="posttitle"><a href="http://blog.perquin.com/blog/ar-drone-i2c/" class="entry-title" rel="bookmark" title="AR Drone i2c">AR Drone i2c</a></h2>
				<div class="postdata fix">
					<span class="category"><a href="./AR.Drone Parrot » Tech Toy Hacks_files/AR.Drone Parrot » Tech Toy Hacks.htm" title="View all posts in AR.Drone Parrot" rel="category tag">AR.Drone Parrot</a></span>
			<span class="comments"><a href="http://blog.perquin.com/blog/ar-drone-i2c/#respond" title="Comment on AR Drone i2c">No Responses »</a></span>
				</div><!-- /.postdata -->
			</div><!-- /.title -->
			<div class="date"><span class="month">Jul</span> <span class="day">17</span><span class="year">2011</span></div>
		</div><!-- /.title-container -->
	<div class="entry-container fix">
		<div class="entry entry-content fix">
<p>This blog page is dedicated to the I2C components of the AR Drone. You can download a custom i2c driver for the voltage measurements of the PMAAC&nbsp;<a href="http://blog.perquin.com/prj/ardrone/CustomFirmwareArDrone.zip">here</a>.</p>
<h2><strong>/dev/i2c-0</strong></h2>
<p>0×49 Atmel AT73C246 ﻿﻿﻿Power Management and Analog Companions (PMAAC)<br>
0×50 24C32WI eeprom﻿<br>
0x5d Bottom camera</p>
<h2><strong>/dev/i2c-1</strong></h2>
<p>&nbsp;0×21 Horizontal Camera – OmniVision ov7725</p>
<h2>References</h2>
<p><a href="http://awesome-drone.blogspot.com/2011/01/i2c-tools-for-ardrone.html">http://awesome-drone.blogspot.com/2011/01/i2c-tools-for-ardrone.html</a></p>
		</div><!--entry -->
	</div><!-- .entry-container -->
	<div class="post-footer fix">
	<span class="author">
	Posted by <a href="http://blog.perquin.com/blog/author/hugo/">hugo</a> at 8:06 pm</span>
			<span class="tags"></span>
	</div><!-- .post-footer -->
	</div><!--post -->
	<div class="post-69 post type-post status-publish format-standard hentry category-ardrone" id="post-69">
		<div class="title-container fix">
			<div class="title">
							<h2 class="posttitle"><a href="http://blog.perquin.com/blog/ar-drone-navboard/" class="entry-title" rel="bookmark" title="AR Drone Navigation Board">AR Drone Navigation Board</a></h2>
				<div class="postdata fix">
					<span class="category"><a href="./AR.Drone Parrot » Tech Toy Hacks_files/AR.Drone Parrot » Tech Toy Hacks.htm" title="View all posts in AR.Drone Parrot" rel="category tag">AR.Drone Parrot</a></span>
			<span class="comments"><a href="http://blog.perquin.com/blog/ar-drone-navboard/#comments" title="Comment on AR Drone Navigation Board">3 Responses »</a></span>
				</div><!-- /.postdata -->
			</div><!-- /.title -->
			<div class="date"><span class="month">Jul</span> <span class="day">06</span><span class="year">2011</span></div>
		</div><!-- /.title-container -->
	<div class="entry-container fix">
		<div class="entry entry-content fix">
<p>This blog page is dedicated to the NavBoard of the AR Drone.</p>
<p>You can <a href="http://blog.perquin.com/prj/ardrone/CustomFirmwareArDrone.zip">download an on-drone c program (source+compiled)</a>&nbsp;to convert&nbsp;raw NavData into physical angle, rotation rate, height and temperature values.</p>
<h2>Navboard Init</h2>
<p>The following script&nbsp;&nbsp;starts the navigation board data stream without first starting &amp; killing program.elf.&nbsp;The script has been tested on an AR.Drone with firmware 1.7.4 and 1.3.3 and navboard hardware version 0xc0. I.e. the reply to command 15 is 0xc0.</p>
<p>The stty command sets up the serial port. The gpio command&nbsp;switches the /RESET&nbsp;pin of the&nbsp;navboard to&nbsp;high, and the echo command&nbsp;instructs the navboard to start the data stream.&nbsp;</p>
<pre>stty -F /dev/ttyPA2 460800 -parenb -parodd cs8 -hupcl -cstopb cread clocal -crtscts -ignbrk -brkint -ignpar -parmrk -inpck -istrip -inlcr -igncr -icrnl -ixon -ixoff -iuclc -ixany -imaxbel -opost -olcuc -ocrnl onlcr -onocr -onlret -ofill -ofdel nl0 cr0 tab0 bs0 vt0 ff0 -isig -icanon -iexten -echo echoe echok -echonl -noflsh -xcase -tostop -echoprt echoctl echoke
gpio 132 -d ho 1
echo -en "\x01" &gt; /dev/ttyPA2</pre>
<p>After this initialization&nbsp;the following command gets a navboard data packet:</p>
<pre>dd if=/dev/ttyPA2 count=1 bs=46 | hexdump -C</pre>
<h2>Navboard Data Packet</h2>
<p>After the navboard&nbsp;has&nbsp;been initialized and acquisition&nbsp;has been&nbsp;started, it sends a 46 byte data frame every 5ms (200Hz) over serial port /dev/ttyPA2. The structure of a data frame is:</p>
<pre>&nbsp;u16 size;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // +0x00 Size of the following data (always 0x2C)
&nbsp;u16 seq;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // +0x02 Sequence number, increases every update
&nbsp;u16 acc[3];&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // +0x04 Raw data (10-bit) of the accelerometers multiplied by 4
&nbsp;u16 gyro[3];&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // +0x0A Raw data for the gyros, 12-bit A/D converted voltage of the gyros. X,Y=IDG, Z=Epson&nbsp;
&nbsp;u16 gyro_110[2];&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // +0x10 4.5x Raw data (IDG), gyro values with another resolution (see IDG-500 datasheet)&nbsp;
&nbsp;u16 acc_temp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // +0x14 Accs temperature -- startup value 120 @ 25C, rising to 143
&nbsp;u16 gyro_temp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // +0x16 XYGyro temperature (IDG), 12-bit A/D converted voltage of IDG's temperature sensor -- startup value 1532 @ 25C, rising to 1572
&nbsp;u16 vrefEpson;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // +0x18 ZGyro v_ref (Epson), 12-bit A/D converted reference voltage of the Epson sensor&nbsp;
&nbsp;u16 vrefIDG;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // +0x1A XYGyro v_ref (IDG), 12-bit A/D converted reference voltage of the IDG sensor&nbsp;&nbsp;
&nbsp;u16 us_echo;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // +0x1C bit15=1 echo pulse transmitted, bit14-0 first echo. Value 30 = 1cm. min value: 784 = 26cm
&nbsp;u16 checksum;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // +0x1E Checksum = sum of all values except checksum (22 values)
&nbsp;u16 us_echo_start;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // +0x20 Array with starts of echos (8 array values @ 25Hz, 9 values @ 22.22Hz)
&nbsp;u16 us_echo_end;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // +0x22 Array with ends of echos&nbsp;&nbsp; (8 array values @ 25Hz, 9 values @ 22.22Hz)
&nbsp;u16 us_association_echo; // +0x24 Ultrasonic parameter -- maybe echo number starting with 0. max value 3758. examples: 0,1,2,3,4,5,6,7&nbsp; ; 0,1,2,3,4,86,6,9
&nbsp;u16 us_distance_echo;&nbsp;&nbsp;&nbsp; // +0x26 Ultrasonic parameter -- no clear pattern
&nbsp;u16 us_courbe_temps;&nbsp;&nbsp;&nbsp;&nbsp; // +0x28 Ultrasonic parameter -- counts up from 0 to approx 24346 in 192 sample cycles of which 12 cylces have value 0
&nbsp;u16 us_courbe_valeur;&nbsp;&nbsp;&nbsp; // +0x2A Ultrasonic parameter -- value between 0 and 4000, no clear pattern. 192 sample cycles of which 12 cylces have value 0
&nbsp;u16 us_courbe_ref;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // +0x2C Ultrasonic parameter -- coutns down from 4000 to 0 in 192 sample cycles of which 12 cylces have value 0</pre>
<h2>Navboard Commands</h2>
<p>The following lists the commands that can be sent to the navboard. The list is obtained from ARDrone_SDK_Version_1_7_20110525\ARDroneLib\Soft\Common\ardrone_common_config.h</p>
<pre>ADC_CMD_STARTACQ&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = 1,&nbsp; /**command to start acquisition with ADC&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; **/
ADC_CMD_STOPACQ&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = 2,&nbsp; /**command to stop acquisition with ADC&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; **/
ADC_CMD_RESYNC&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = 3,&nbsp; /**command to resync acquisition with ADC&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; **/
ADC_CMD_TEST&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = 4,&nbsp; /**command to ADC send a test frame (123456)&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; **/
ADC_CMD_VERSION&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = 5,&nbsp; /**command to ADC send his number : version (MSB) subversion (LSB) **/
   Example: reply to cmd 5 is 0x37 00 04 00&nbsp;&lt;--&gt; version 4.37
ADC_CMD_SELECT_ULTRASOUND_22Hz&nbsp; = 7,&nbsp; /**set the ultrasound at 22,22Hz&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; **/
ADC_CMD_SELECT_ULTRASOUND_25Hz&nbsp; = 8,&nbsp; /**set the ultrasound at 25Hz&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; **/
ADC_CMD_SEND_CALIBRE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = 13, /**command to ADC to send the calibration&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; **/
ADC_CMD_RECEVED_CALIBRE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = 14, /**command to ADC to receved a new calibration&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; **/
ADC_CMD_GET_HARD_VERSION&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = 15, /**get the hard version of the navboard&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; **/
&nbsp;&nbsp; Example: reply to cmd 15 is 0xc0&nbsp;&lt;--&gt; version 11.0
ADC_CMD_ACTIVE_SEPARATION&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = 16, /**enabled the separation of sources ultrasound&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; **/
ADC_CMD_STOP_SEPARATION&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = 17, /**disables the ultrasound source separation&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; **/
ADC_CMD_RECEVED_PROD&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = 18, /**command to ADC to receved the prod data&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; **/
ADC_CMD_SEND_PROD&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = 19, /**command to ADC to send the prod data&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; **/
ADC_CMD_ACTIVE_ETALONAGE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = 20, /**command to ADC to send PWM ultrasond in continue&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; **/
ADC_CMD_ACTIVE_ULTRASON&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = 21, /**command to ADC to stop send PWM ultrasond in continue&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; **/
ADC_CMD_ACTIVE_TEST_ULTRASON&nbsp;&nbsp;&nbsp; = 22, /**teste de la perturbation de l'ultrason par le wifi&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; **/</pre>
<h2>Navboard Connector Pinout</h2>
<pre>1 : +Vcc (5v)
2 : PGED2/RP10(1)/CN16/PMD2/RB10 (8) (ICSP)  &lt;--&gt; GPIO 130
3 : Txd (to Navboard)
4 : PGEC2/RP11(1)/CN15/PMD1/RB11 (9) (ICSP)  &lt;--&gt; GPIO 131
5 : Rxd (from Navboard)
6 : /MCLEAR (18)                             &lt;--&gt; GPIO 132
7 : GND
8 : GND</pre>
<h2>References</h2>
<p><a href="http://embedded-software.blogspot.com/2011/01/reading-navigation-data-directly-from.html">http://embedded-software.blogspot.com/2011/01/reading-navigation-data-directly-from.html</a></p>
		</div><!--entry -->
	</div><!-- .entry-container -->
	<div class="post-footer fix">
	<span class="author">
	Posted by <a href="http://blog.perquin.com/blog/author/hugo/">hugo</a> at 12:19 pm</span>
			<span class="tags"></span>
	</div><!-- .post-footer -->
	</div><!--post -->
	<div class="post-47 post type-post status-publish format-standard hentry category-ardrone" id="post-47">
		<div class="title-container fix">
			<div class="title">
							<h2 class="posttitle"><a href="http://blog.perquin.com/blog/ardrone-motor-controller/" class="entry-title" rel="bookmark" title="AR Drone Motor Controller">AR Drone Motor Controller</a></h2>
				<div class="postdata fix">
					<span class="category"><a href="./AR.Drone Parrot » Tech Toy Hacks_files/AR.Drone Parrot » Tech Toy Hacks.htm" title="View all posts in AR.Drone Parrot" rel="category tag">AR.Drone Parrot</a></span>
			<span class="comments"><a href="http://blog.perquin.com/blog/ardrone-motor-controller/#comments" title="Comment on AR Drone Motor Controller">7 Responses »</a></span>
				</div><!-- /.postdata -->
			</div><!-- /.title -->
			<div class="date"><span class="month">Jun</span> <span class="day">09</span><span class="year">2011</span></div>
		</div><!-- /.title-container -->
	<div class="entry-container fix">
		<div class="entry entry-content fix">
<p>This blog page is dedicated to the motors of the AR Drone.</p>
<p>You can <a href="http://blog.perquin.com/prj/ardrone/CustomFirmwareArDrone.zip">download an on-drone c program (source+compiled)</a>&nbsp;to control the motors and leds.</p>
<h2>Pinout</h2>
<pre>Pin 1 Battery 11.4V
Pin 2 VCC 5V (ATMega8a VCC Pin4+5)
Pin 3 TX+RX (ATmega8a Pin30+31)
Pin 4 IRQ to main board (ATmega8a PC3 Pin26)
Pin 5 GND

Pin 1 Red
Pin 2 White
Pin 3 Motor1=Yellow,M2=Orange,M3=Blue,M4=Green
Pin 4 Motor1=Purple,M2=Gray,M3=Brown,M4=Pink
Pin 5 Black</pre>
<h2>IRQ</h2>
<p>Whenever the motor controller detects a problem, it will stop running and toggles the IRQ pin. A rising edge to 5v on the IRQ pin sets GPIO 106 (i.e. `gpio 106 -r` returns 1). Pin 106 can be reset to 0 by toggling GPIO 107, i.e. `gpio 107 -d ho 0; gpio 107 -d ho 1`.</p>
<p>In other words this is a flipflop circuit, with Set=IRQ, Reset=GPIO107 and Data=GPIO106.</p>
<h2>GPIO</h2>
<pre>gpio 68 -d i = select motor1
gpio 68 -d ho 0 = deselect motor1
gpio 69 -d i = select motor2
gpio 69 -d ho 0 = deselect motor2
gpio 70 -d i = select motor3
gpio 70 -d ho 0 = deselect motor3
gpio 71 -d i = select motor4
gpio 71 -d ho 0 = deselect motor4
gpio 106 -i = IRQ input, 1=IRQ requested
gpio 107 -d ho 0; gpio 107 -d ho 1 = reset GPIO 106 to 0</pre>
<h2>Serial Communication</h2>
<p>Baud rate: 115200, 8n1</p>
<h3>Unicast Commands</h3>
<p>Configuiration sent to single motor. The motor is selected with GPIO 68 to 71.</p>
<pre>write -&gt; reply in hex, null means no reply
E0 -&gt; status             : get status 00=ok, 50=need reflash
if(status==50){
 71 64bytes 70 -&gt; null    : program flash, repeated 120 times (120 blocks of 64bytes = 7920bytes)
 91 -&gt; 120 bytes          : get 120 checksums of 64 byte flash blocks
 A1 -&gt; A0 FF              : set status OK (command send after command 91)
}
01 or 02,03,04 -&gt; null    : assign as motor1,2,3,4
40 -&gt; 11 bytes            : check versions (eg 01 0b 03 00 01 01 0a 0a 1a 0a 0a = soft version 1.11, hard version 3.0, supplier 1.1, lot number 10/10, FVT1 26/10/10)</pre>
<h3>Multicast commands</h3>
<p>Sent to all motors.</p>
<pre>A0 A0 A0 A0 A0 A0 -&gt; null : start of multicast
2x xx xx xx xx -&gt; null    : set speeds sent every 5ms
89 or 8A,8B,8X -&gt; 28 2f   : check motor1,2,3,4 alive - sent one command every 25 frames (i.e. every 125ms one motor, same motor every 500ms)
6x xx,7x xx -&gt; null       : set leds bit5=Red Rear Left, bit6=Green Rear Left, bit7=Red Rear Right, bit8=Green Rear Right, bit9=Red Front Right, bit10=Green Front Right, bit11=Red Front Left, bit12=Green Front Left  (011grgrg rgrxxxx)</pre>
<h2>Init Sequence</h2>
<p>(as used by program.elf)</p>
<p>for x=1 to 4<br>
&nbsp;&nbsp;&nbsp; CSx_ Low<br>
&nbsp;&nbsp; &nbsp;TX E0, RX 2 bytes<br>
&nbsp;&nbsp;&nbsp; TX 91, RX 121 bytes<br>
&nbsp;&nbsp;&nbsp; TX A1, RX 3 bytes<br>
&nbsp;&nbsp;&nbsp; TX 00+x, RX 1 byte<br>
&nbsp;&nbsp;&nbsp; TX 40, RX 12 bytes<br>
&nbsp;&nbsp;&nbsp; CSx_ High<br>
&nbsp;&nbsp;&nbsp; wait 500ms<br>
end for<br>
for x=1 to 4<br>
&nbsp;&nbsp;&nbsp; CSx_ Low<br>
&nbsp;&nbsp;&nbsp; TX E0, RX 2 bytes<br>
&nbsp;&nbsp;&nbsp; TX 00+x, RX 1 byte<br>
&nbsp;&nbsp;&nbsp; TX 40, RX 12 bytes<br>
&nbsp;&nbsp;&nbsp; CSx_ High<br>
end for<br>
wait 500ms<br>
CS1_,CS2_,CS3_,CS4_ Low (select all)<br>
for x=1 to 6<br>
&nbsp;&nbsp;&nbsp; TX A0 -&gt; RX 1 byte<br>
end for</p>
<h2>Set Speeds</h2>
<p>001aaaaa aaaabbbb bbbbbccc ccccccdd ddddddd0<br>
a,b,c,d = 9 bits for motor 1,2,3,4 (msb first)<br>
transmitted every 5ms (200Hz)<br>
every 80ms send 2x + one 8x code</p>
<h1>References</h1>
<p><a href="http://fenrir.naruoka.org/archives/000805.html">http://fenrir.naruoka.org/archives/000805.html</a></p>
<p><a href="http://www.ardrone-flyers.com/forum/viewtopic.php?f=13&t=1025&start=15">http://www.ardrone-flyers.com/forum/viewtopic.php?f=13&amp;t=1025&amp;start=15</a></p>
<h1>Test Script</h1>
<p>The following script initializes the motor and starts the control loop. The control loop flashes all leds. The script has been tested as replacement for program.elf on a AR.Drone with firmware version 1.7.4 and 1.3.3, motor software&nbsp;version 1.20 and 1.11, motor hardware version 3.0, motor supplier 1.1 and 2.2.</p>
<pre>#set baud rate
stty -F /dev/ttyPA1 115200

#reset IRQ flipflop - on error 106 read 1, this code resets 106 to 0
gpio 106 -d i
gpio 107 -d ho 0
gpio 107 -d ho 1

#all select lines inactive
gpio 68 -d ho 1
gpio 69 -d ho 1
gpio 70 -d ho 1
gpio 72 -d ho 1

#configure motor1
gpio 68 -d i
echo -en "\xe0" &gt; /dev/ttyPA1
usleep 100
echo -en "\x01" &gt; /dev/ttyPA1
usleep 100
echo -en "\x40" &gt; /dev/ttyPA1
usleep 100
gpio 68 -d ho 1

#configure motor2
gpio 69 -d i
echo -en "\xe0" &gt; /dev/ttyPA1
usleep 100
echo -en "\x02" &gt; /dev/ttyPA1
usleep 100
echo -en "\x40" &gt; /dev/ttyPA1
usleep 100
gpio 69 -d ho 1

#configure motor3
gpio 70 -d i
echo -en "\xe0" &gt; /dev/ttyPA1
usleep 100
echo -en "\x03" &gt; /dev/ttyPA1
usleep 100
echo -en "\x40" &gt; /dev/ttyPA1
usleep 100
gpio 70 -d ho 1

#configure motor4
gpio 71 -d i
echo -en "\xe0" &gt; /dev/ttyPA1
usleep 100
echo -en "\x04" &gt; /dev/ttyPA1
usleep 100
echo -en "\x40" &gt; /dev/ttyPA1
usleep 100
gpio 71 -d ho 1

#all select lines active
gpio 68 -d i
gpio 69 -d i
gpio 70 -d i
gpio 71 -d i

#start multicast
echo -en "\xa0" &gt; /dev/ttyPA1
usleep 100
echo -en "\xa0" &gt; /dev/ttyPA1
usleep 100
echo -en "\xa0" &gt; /dev/ttyPA1
usleep 100
echo -en "\xa0" &gt; /dev/ttyPA1
usleep 100
echo -en "\xa0" &gt; /dev/ttyPA1
usleep 100
echo -en "\xa0" &gt; /dev/ttyPA1
usleep 100

#reset IRQ flipflop - on error 106 read 1, this code resets 106 to 0
gpio 106 -d i
gpio 107 -d ho 0
gpio 107 -d ho 1

#multicast loop
while true
do

echo -en "\x20\x00\x00\x00\x00" &gt;/dev/ttyPA1
usleep 5000
echo -en "\x20\x00\x00\x00\x00" &gt;/dev/ttyPA1
usleep 5000
echo -en "\x20\x00\x00\x00\x00" &gt;/dev/ttyPA1
usleep 5000
echo -en "\x20\x00\x00\x00\x00" &gt;/dev/ttyPA1
usleep 5000
echo -en "\x20\x00\x00\x00\x00" &gt;/dev/ttyPA1
usleep 5000
echo -en "\x20\x00\x00\x00\x00" &gt;/dev/ttyPA1
usleep 5000
echo -en "\x20\x00\x00\x00\x00" &gt;/dev/ttyPA1
usleep 5000
echo -en "\x20\x00\x00\x00\x00" &gt;/dev/ttyPA1
usleep 5000
echo -en "\x20\x00\x00\x00\x00" &gt;/dev/ttyPA1
usleep 5000
echo -en "\x20\x00\x00\x00\x00" &gt;/dev/ttyPA1
usleep 5000
echo -en "\x20\x00\x00\x00\x00" &gt;/dev/ttyPA1
usleep 5000
echo -en "\x20\x00\x00\x00\x00" &gt;/dev/ttyPA1
usleep 5000
echo -en "\x20\x00\x00\x00\x00" &gt;/dev/ttyPA1
usleep 5000
echo -en "\x20\x00\x00\x00\x00" &gt;/dev/ttyPA1
usleep 5000
echo -en "\x20\x00\x00\x00\x00" &gt;/dev/ttyPA1
usleep 5000
echo -en "\x20\x00\x00\x00\x00" &gt;/dev/ttyPA1
usleep 5000
echo -en "\x20\x00\x00\x00\x00" &gt;/dev/ttyPA1
usleep 5000
echo -en "\x20\x00\x00\x00\x00" &gt;/dev/ttyPA1
usleep 5000
echo -en "\x20\x00\x00\x00\x00" &gt;/dev/ttyPA1
usleep 5000
echo -en "\x20\x00\x00\x00\x00" &gt;/dev/ttyPA1
usleep 5000
echo -en "\x20\x00\x00\x00\x00" &gt;/dev/ttyPA1
usleep 5000
echo -en "\x20\x00\x00\x00\x00" &gt;/dev/ttyPA1
usleep 5000
echo -en "\x20\x00\x00\x00\x00" &gt;/dev/ttyPA1
usleep 5000
echo -en "\x20\x00\x00\x00\x00" &gt;/dev/ttyPA1
usleep 5000
echo -en "\x20\x00\x00\x00\x00" &gt;/dev/ttyPA1
usleep 5000
#all leds orange
echo -en "\x7f\xf0" &gt;/dev/ttyPA1

echo -en "\x20\x00\x00\x00\x00" &gt;/dev/ttyPA1
usleep 5000
echo -en "\x20\x00\x00\x00\x00" &gt;/dev/ttyPA1
usleep 5000
echo -en "\x20\x00\x00\x00\x00" &gt;/dev/ttyPA1
usleep 5000
echo -en "\x20\x00\x00\x00\x00" &gt;/dev/ttyPA1
usleep 5000
echo -en "\x20\x00\x00\x00\x00" &gt;/dev/ttyPA1
usleep 5000
echo -en "\x20\x00\x00\x00\x00" &gt;/dev/ttyPA1
usleep 5000
echo -en "\x20\x00\x00\x00\x00" &gt;/dev/ttyPA1
usleep 5000
echo -en "\x20\x00\x00\x00\x00" &gt;/dev/ttyPA1
usleep 5000
echo -en "\x20\x00\x00\x00\x00" &gt;/dev/ttyPA1
usleep 5000
echo -en "\x20\x00\x00\x00\x00" &gt;/dev/ttyPA1
usleep 5000
echo -en "\x20\x00\x00\x00\x00" &gt;/dev/ttyPA1
usleep 5000
echo -en "\x20\x00\x00\x00\x00" &gt;/dev/ttyPA1
usleep 5000
echo -en "\x20\x00\x00\x00\x00" &gt;/dev/ttyPA1
usleep 5000
echo -en "\x20\x00\x00\x00\x00" &gt;/dev/ttyPA1
usleep 5000
echo -en "\x20\x00\x00\x00\x00" &gt;/dev/ttyPA1
usleep 5000
echo -en "\x20\x00\x00\x00\x00" &gt;/dev/ttyPA1
usleep 5000
echo -en "\x20\x00\x00\x00\x00" &gt;/dev/ttyPA1
usleep 5000
echo -en "\x20\x00\x00\x00\x00" &gt;/dev/ttyPA1
usleep 5000
echo -en "\x20\x00\x00\x00\x00" &gt;/dev/ttyPA1
usleep 5000
echo -en "\x20\x00\x00\x00\x00" &gt;/dev/ttyPA1
usleep 5000
echo -en "\x20\x00\x00\x00\x00" &gt;/dev/ttyPA1
usleep 5000
echo -en "\x20\x00\x00\x00\x00" &gt;/dev/ttyPA1
usleep 5000
echo -en "\x20\x00\x00\x00\x00" &gt;/dev/ttyPA1
usleep 5000
echo -en "\x20\x00\x00\x00\x00" &gt;/dev/ttyPA1
usleep 5000
echo -en "\x20\x00\x00\x00\x00" &gt;/dev/ttyPA1
usleep 5000
#all leds off
echo -en "\x60\x00" &gt;/dev/ttyPA1

done</pre>
		</div><!--entry -->
	</div><!-- .entry-container -->
	<div class="post-footer fix">
	<span class="author">
	Posted by <a href="http://blog.perquin.com/blog/author/hugo/">hugo</a> at 2:00 am</span>
			<span class="tags"></span>
	</div><!-- .post-footer -->
	</div><!--post -->
      </div><!-- content -->
    </div><!-- main col -->
<div id="sidebar-shell-1" class="sidebar-shell sidebar-shell-right">
<div class="dbx-group right boxed warea" id="sidebar">
		<!--widget start --><div id="recent-posts-3" class="dbx-box suf-widget widget_recent_entries"><h3 class="dbx-handle plain">Recent Posts</h3><div class="dbx-content">				<ul>
					<li>
				<a href="http://blog.perquin.com/blog/ar-drone-usb-drive/" title="AR Drone USB Drive">AR Drone USB Drive</a>
						</li>
					<li>
				<a href="http://blog.perquin.com/blog/ar-drone-program-elf-replacement/" title="AR Drone program.elf Replacement">AR Drone program.elf Replacement</a>
						</li>
					<li>
				<a href="http://blog.perquin.com/blog/ar-drone-versions/" title="AR Drone Versions">AR Drone Versions</a>
						</li>
					<li>
				<a href="http://blog.perquin.com/blog/ar-drone-video/" title="AR Drone Video">AR Drone Video</a>
						</li>
					<li>
				<a href="http://blog.perquin.com/blog/ar-drone-gpio/" title="AR Drone GPIO">AR Drone GPIO</a>
						</li>
					<li>
				<a href="http://blog.perquin.com/blog/ar-drone-i2c/" title="AR Drone i2c">AR Drone i2c</a>
						</li>
					<li>
				<a href="http://blog.perquin.com/blog/ar-drone-navboard/" title="AR Drone Navigation Board">AR Drone Navigation Board</a>
						</li>
					<li>
				<a href="http://blog.perquin.com/blog/ardrone-motor-controller/" title="AR Drone Motor Controller">AR Drone Motor Controller</a>
						</li>
					<li>
				<a href="http://blog.perquin.com/blog/opensense/" title="OpenSense">OpenSense</a>
						</li>
					<li>
				<a href="http://blog.perquin.com/blog/opensense-i2cmaster/" title="OpenSense I2cMaster">OpenSense I2cMaster</a>
						</li>
				</ul>
		</div></div><!--widget end --><!--widget start --><div id="categories-3" class="dbx-box suf-widget widget_categories"><h3 class="dbx-handle plain">Categories</h3><div class="dbx-content">		<ul>
	<li class="cat-item cat-item-6 current-cat"><a href="./AR.Drone Parrot » Tech Toy Hacks_files/AR.Drone Parrot » Tech Toy Hacks.htm">AR.Drone Parrot</a>
</li>
	<li class="cat-item cat-item-3"><a href="http://blog.perquin.com/blog/category/roomba/">iRobot Roomba</a>
</li>
	<li class="cat-item cat-item-4"><a href="http://blog.perquin.com/blog/category/odbii/">ODB II</a>
</li>
	<li class="cat-item cat-item-5"><a href="http://blog.perquin.com/blog/category/opensense/">OpenSense</a>
</li>
	<li class="cat-item cat-item-1"><a href="http://blog.perquin.com/blog/category/uncategorized/">Uncategorized</a>
</li>
		</ul>
</div></div><!--widget end --><!--widget start --><div id="archives-3" class="dbx-box suf-widget widget_archive"><h3 class="dbx-handle plain">Archives</h3><div class="dbx-content">		<ul>
			<li><a href="http://blog.perquin.com/blog/2012/09/" title="September 2012">September 2012</a></li>
	<li><a href="http://blog.perquin.com/blog/2011/09/" title="September 2011">September 2011</a></li>
	<li><a href="http://blog.perquin.com/blog/2011/07/" title="July 2011">July 2011</a></li>
	<li><a href="http://blog.perquin.com/blog/2011/06/" title="June 2011">June 2011</a></li>
	<li><a href="http://blog.perquin.com/blog/2006/01/" title="January 2006">January 2006</a></li>
	<li><a href="http://blog.perquin.com/blog/2005/05/" title="May 2005">May 2005</a></li>
	<li><a href="http://blog.perquin.com/blog/2005/01/" title="January 2005">January 2005</a></li>
	<li><a href="http://blog.perquin.com/blog/2004/11/" title="November 2004">November 2004</a></li>
	<li><a href="http://blog.perquin.com/blog/2004/10/" title="October 2004">October 2004</a></li>
	<li><a href="http://blog.perquin.com/blog/2001/10/" title="October 2001">October 2001</a></li>
		</ul>
</div></div><!--widget end --></div><!--/sidebar -->
</div>
	</div><!-- /container -->

	<div id="cred">
		<table>
			<tbody><tr>
				<td class="cred-left">© 2013 <a href="http://blog.perquin.com/">Tech Toy Hacks</a></td>
				<td class="cred-center"></td>
				<td class="cred-right"><a href="http://www.aquoid.com/news/themes/suffusion/">Suffusion theme by Sayontan Sinha</a></td>
			</tr>
		</tbody></table>
	</div>
		<!-- 47 queries, 30MB in 0.204 seconds. -->
	</div><!--/wrapper -->



</body></html>